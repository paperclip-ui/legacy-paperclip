"use strict";(self.webpackChunk_paperclip_ui_website=self.webpackChunk_paperclip_ui_website||[]).push([[1303],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return f}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=l(n),f=i,d=m["".concat(c,".").concat(f)]||m[f]||u[f]||o;return n?r.createElement(d,a(a({ref:t},p),{},{components:n})):r.createElement(d,a({ref:t},p))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var l=2;l<o;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4318:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return p},default:function(){return m}});var r=n(7462),i=n(3366),o=(n(7294),n(3905)),a=["components"],s={id:"guide-how-to-use",title:"Paperclip Basics",sidebar_label:"The Basics"},c=void 0,l={unversionedId:"guide-how-to-use",id:"guide-how-to-use",title:"Paperclip Basics",description:"You can think of Paperclip as a language that focuses purely on your web application's appearance -  just covering HTML, CSS, and basic components. With that, you can construct almost all of your application UI in Paperclip. For example, here's a simple list:",source:"@site/docs/guide-how-to-use.md",sourceDirName:".",slug:"/guide-how-to-use",permalink:"/docs/guide-how-to-use",editUrl:"https://github.com/paperclipui/paperclip/edit/master/packages/paperclip-website/docs/guide-how-to-use.md",tags:[],version:"current",frontMatter:{id:"guide-how-to-use",title:"Paperclip Basics",sidebar_label:"The Basics"}},p=[],u={toc:p};function m(e){var t=e.components,n=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"You can think of Paperclip as a language that focuses ",(0,o.kt)("em",{parentName:"p"},"purely")," on your web application's appearance -  just covering HTML, CSS, and basic components. With that, you can construct almost ",(0,o.kt)("em",{parentName:"p"},"all")," of your application UI in Paperclip. For example, here's a simple list:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html",metastring:"live",live:!0},'<style>\n  .list {\n    padding-left: 1em;\n    font-family: sans-serif;\n  }\n  .list-item {\n    margin-top: 6px;\n    &--completed {\n      text-decoration: line-through;\n    }\n  }\n</style>\n\n\x3c!-- Components --\x3e\n\n<ol export component as="List" className="list">\n  {children}\n</ol>\n\n<li export component as="ListItem"\n  className="list-item"\n  className:completed="list-item--completed">\n  {children}\n</li>\n\n\x3c!-- Preview to see what the UI looks like in paperclip --\x3e\n\n<List>\n  <ListItem>Bagels \ud83e\udd6f</ListItem>\n  <ListItem completed>Yakitori \ud83c\udf62</ListItem>\n  <ListItem>Tofurky \ud83e\udd83</ListItem>\n  <ListItem>Skittles \ud83c\udf08</ListItem>\n</List>\n')),(0,o.kt)("p",null,"Here's how you can use the template above in a React app:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'import * as React from "react";\nimport * as styles from "./GroceryList.pc";\n\nexport function GroceryList() {\n\n  const groceries = [\n    "Milk \ud83e\udd5b", \n    "Water \ud83d\udca7", \n    "Taco seasoning \ud83c\udf2e"\n  ];\n\n  return <styles.List>\n    {\n      groceries.map(item => (\n        <styles.ListItem>{item}</styles.ListItem>\n      ))\n    }\n  </styles.List>;  \n}\n')),(0,o.kt)("p",null,"\u261d\ud83c\udffb Basically, all this component is doing is adding dynamic behavior to our Paperclip building blocks, and that's all there is to it between Paperclip UIs and code, really. UIs go in Paperclip, logic goes in code."))}m.isMDXComponent=!0}}]);