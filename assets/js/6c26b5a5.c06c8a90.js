"use strict";(self.webpackChunkpaperclip_website=self.webpackChunkpaperclip_website||[]).push([[8944],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=o.createContext({}),p=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return o.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(t),m=r,g=u["".concat(l,".").concat(m)]||u[m]||d[m]||a;return t?o.createElement(g,i(i({ref:n},c),{},{components:t})):o.createElement(g,i({ref:n},c))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<a;p++)i[p]=t[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},8158:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return c},default:function(){return u}});var o=t(7462),r=t(3366),a=(t(7294),t(3905)),i=["components"],s={id:"guide-organization",title:"Paperclip Organization",sidebar_label:"Organization"},l=void 0,p={unversionedId:"guide-organization",id:"guide-organization",isDocsHomePage:!1,title:"Paperclip Organization",description:"The general structure that I'd recommend for Paperclip content is:",source:"@site/docs/guide-organization.md",sourceDirName:".",slug:"/guide-organization",permalink:"/docs/guide-organization",editUrl:"https://github.com/crcn/paperclip/edit/master/packages/paperclip-website/docs/guide-organization.md",tags:[],version:"current",frontMatter:{id:"guide-organization",title:"Paperclip Organization",sidebar_label:"Organization"},sidebar:"docs",previous:{title:"The Basics",permalink:"/docs/guide-how-to-use"},next:{title:"Migrating Code",permalink:"/docs/guide-migrating-to-paperclip"}},c=[],d={toc:c};function u(e){var n=e.components,s=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},d,s,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The general structure that I'd recommend for Paperclip content is:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},'\x3c!-- Component building blocks section. Keep them invisible --\x3e\n\n<div export component as="SomeComponent">\n\n  \x3c!-- Keep styles defined in the elements that they\'re styling --\x3e\n  <style> \n    padding: 20px;\n    background: #333;\n  </style>\n  {children}\n</div>\n\n<div export component as="AnotherComponent">\n  <style>\n    /* ... */\n  </style>\n  {children}\n</div>\n\n\x3c!-- preview --\x3e\n\n<SomeComponent>\n  <AnotherComponent />\n</SomeComponent>\n\n\x3c!-- another preview --\x3e\n\n<SomeComponent>\n  <AnotherComponent />\n  <AnotherComponent />\n  <AnotherComponent />\n</SomeComponent>\n')),(0,a.kt)("p",null,"Writing previews may seem a bit redundant since they'll reflect your React components - there's some duplicate code, but they are import to define for a few reasons:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Previews double up as visual regression tests if you're using the ",(0,a.kt)("a",{parentName:"li",href:"configure-percy"},"Percy")," integration."),(0,a.kt)("li",{parentName:"ul"},"Previews act as documentation for seeing ",(0,a.kt)("em",{parentName:"li"},"every")," visual state of a component."),(0,a.kt)("li",{parentName:"ul"},"Previews allow you to design your app without needing to spin up a development server.")),(0,a.kt)("p",null,"To keep your previews more DRY, you can combine them into one master preview component. For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},'\x3c!--\n  @frame { visible: false, title: "Base Preview", width: 1742, height: 1001, x: 1395, y: -595 }\n--\x3e\n<App export component as="Preview" \n  {className?}\n  className:showBranded="show-branded">\n  <style>\n    &.show-branded {\n      --primary-color: rgb(223, 20, 20);\n    }\n  </style>\n  <Topbar.Preview showLoggedIn {showBranded?} />\n  <Container sidebar={<Sidebar.Preview />}>\n\n    \x3c!-- company profile --\x3e\n    {showCompanyProfile && <Content>\n      <CompanyProfile.Preview />\n    </Content>}\n\n    \x3c!-- mnda --\x3e\n    {showMNDA && <Content>\n      <MNDA.Preview />\n    </Content>}\n    \n    \x3c!-- MNDA signed --\x3e\n    {showMNDASigned && <Content>\n      <MNDA.Preview2 />\n    </Content>}\n\n     { showSkipDataSync && <Content>\n      <SkipDataSync.Preview />\n    </Content>}\n  </Container>\n\n  { showWelcome && <WelcomeOverlay.Preview>\n  </WelcomeOverlay.Preview>}\n\n  \x3c!-- more variants ... --\x3e\n</App>\n\n\n\x3c!--\n  @frame { title: "Onboarding / Welcome", width: 1531, height: 816, x: -275, y: -1705 }\n--\x3e\n<Preview showCompanyProfile showWelcome />\n\n\x3c!--\n  @frame { title: "Onboarding / MNDA", width: 1531, height: 816, x: -296, y: 503 }\n--\x3e\n<Preview showMNDA showBranded>\n  <style>\n    --primary-color: rgb(0, 255, 128);\n  </style>\n</Preview>\n\n\x3c!--\n  @frame { title: "System Connect", width: 1531, height: 991, x: -318, y: 1860 }\n--\x3e\n<Preview showSystemConnect />\n\n\x3c!-- move variants below --\x3e\n')),(0,a.kt)("p",null,"This way, you keep all of your visual states in one spot which makes it easier to maintain, and preview different states of your app for visual development and visual regression coverage."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"onboarding",src:t(570).Z})),(0,a.kt)("p",null,"Be sure ",(0,a.kt)("em",{parentName:"p"},"not")," to include preview components into your React code - previews are just used for development and testing purposes. "),(0,a.kt)("h1",{id:"organizing-files"},"Organizing files"),(0,a.kt)("p",null,"My recommendation is to keep ",(0,a.kt)("inlineCode",{parentName:"p"},"PC")," files alonside the React components that are using them. For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"components/\n  TabNavigation.pc\n  TabNavigation.tsx\n")),(0,a.kt)("p",null,"Another good pattern is to have a master ",(0,a.kt)("inlineCode",{parentName:"p"},"components.pc")," file that contains ",(0,a.kt)("em",{parentName:"p"},"all")," of your design system elements. For example:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"design system",src:t(2174).Z})),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"This is our current WIP design system at ",(0,a.kt)("a",{parentName:"p",href:"https://captec.io"},"Capital"))),(0,a.kt)("p",null,"The benefit of having this is that you can see ",(0,a.kt)("em",{parentName:"p"},"everything")," in one spot. Here's what your folder structure might look like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"design-system/\n  components.pc\n  Button.tsx\n  TabNavigation.tsx\n  Modal.tsx\n")),(0,a.kt)("p",null,"Then, in each of your components, just include what's needed from ",(0,a.kt)("inlineCode",{parentName:"p"},"components.pc"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React, { useCallback, useEffect, useState } from 'react';\nimport * as styles from './components.pc';\n\nexport type ModalProps = {\n  visible?: boolean;\n  closable?: boolean;\n  header?: any;\n  narrow?: boolean;\n  padded?: boolean;\n  wide?: boolean;\n  children: any;\n  side?: boolean;\n  footer?: any;\n  onClose?: any;\n};\n\nexport const Modal = ({\n  header,\n  side,\n  closable,\n  narrow,\n  wide,\n  children,\n  padded,\n  visible = true,\n  onClose,\n  footer,\n}: ModalProps) => {\n  const { isOpen, transitioning, onBackgroundClick } = useModal({\n    closable,\n    onClose,\n    visible,\n  });\n\n  // if closed & done transitioning, then do not render modal.\n  if (!isOpen && !transitioning) {\n    return null;\n  }\n\n  return (\n    <styles.Modal\n      side={side}\n      visible={isOpen}\n      onBackgroundClick={onBackgroundClick}\n    >\n      <styles._ModalContent\n        padded={padded}\n        wide={wide}\n        narrow={narrow}\n        footer={footer}\n      >\n        {header && <styles._ModalHeader>{header}</styles._ModalHeader>}\n        {children}\n      </styles._ModalContent>\n    </styles.Modal>\n  );\n};\n")))}u.isMDXComponent=!0},2174:function(e,n,t){n.Z=t.p+"assets/images/ds-preview-bf2a075595a0b6e67a5d48025dbdcaac.gif"},570:function(e,n,t){n.Z=t.p+"assets/images/preview-variants-5132bb188059bc4243483e9db7ca1103.gif"}}]);