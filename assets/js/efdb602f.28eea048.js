"use strict";(self.webpackChunk_paperclip_ui_website=self.webpackChunk_paperclip_ui_website||[]).push([[3821],{3905:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return d}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var a=r.createContext({}),c=function(e){var n=r.useContext(a),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},m=function(e){var n=c(e.components);return r.createElement(a.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),u=c(t),d=o,f=u["".concat(a,".").concat(d)]||u[d]||s[d]||i;return t?r.createElement(f,l(l({ref:n},m),{},{components:t})):r.createElement(f,l({ref:n},m))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,l=new Array(i);l[0]=u;var p={};for(var a in n)hasOwnProperty.call(n,a)&&(p[a]=n[a]);p.originalType=e,p.mdxType="string"==typeof e?e:o,l[1]=p;for(var c=2;c<i;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},68344:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return p},contentTitle:function(){return a},metadata:function(){return c},toc:function(){return m},default:function(){return u}});var r=t(87462),o=t(63366),i=(t(67294),t(3905)),l=["components"],p={id:"guide-compilers",title:"Compilers",sidebar_label:"Compilers"},a=void 0,c={unversionedId:"guide-compilers",id:"guide-compilers",title:"Compilers",description:"If you prefer to figure things out yourself, a few good place to start would be the React compiler, and Interim module.",source:"@site/docs/guide-compiler.md",sourceDirName:".",slug:"/guide-compilers",permalink:"/docs/guide-compilers",editUrl:"https://github.com/paperclipui/paperclip/edit/master/packages/paperclip-website/docs/guide-compiler.md",tags:[],version:"current",frontMatter:{id:"guide-compilers",title:"Compilers",sidebar_label:"Compilers"},sidebar:"docs",previous:{title:"Previews",permalink:"/docs/guide-previews"}},m=[],s={toc:m};function u(e){var n=e.components,t=(0,o.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"}," If you prefer to figure things out yourself, a few good place to start would be the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/paperclipui/paperclip/blob/master/packages/paperclip-compiler-react/src/code-compiler.ts"},"React compiler"),", and ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/paperclipui/paperclip/blob/master/packages/paperclip-interim/src/state/html.ts"},"Interim module"),".")),(0,i.kt)("p",null,"This is a very basic guide to getting started with compilers."),(0,i.kt)("p",null,"Compilers should be written in JavaScript (this will be expanded in the future). Here's the general structure of one:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"@paperclip-ui/compiler-[NAME]/\n  src/\n    compile.ts\n    index.ts\n  package.json\n")),(0,i.kt)("p",null,"We'll look at the main entry point into the compiler: ",(0,i.kt)("inlineCode",{parentName:"p"},"index.ts"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},'import { InterimModule, CompileOptions } from "@paperclip-ui/interim";\nimport { compile as compile2Code } from "./code-compiler";\n\n/**\n * Takes the Paperclip AST and returns compiled code\n */\n\nexport const compile = ({module}: CompileOptions) => {\n  const code  = compile2Code(module);\n\n  return {\n    ".my-extension": code,\n    // you can add more translations here. \n    // .rb.\n  };\n};\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"module")," passed into the ",(0,i.kt)("inlineCode",{parentName:"p"},"compile")," function is the JSON representation of the Paperclip file being compiled. For example, if we look at this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<div export component as="HelloWorld">\n  <style>\n    color: red;\n  </style>\n  Hello world!\n</div>\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/paperclipui/paperclip/blob/master/packages/@paperclip-ui/interim/src/state/module.ts"},"InterimModule")," representation of this would be something like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n  imports: [],\n  components: [\n    {\n      as: "HelloWorld",\n      kind: "Component",\n      exported: true,\n      isInstance: false,\n      attributes: {},\n\n      // class names to attach to this element. These are\n      // associated with the inline styles & other CSS defined\n      // within the document.\n      scopeClassNames: ["_59bb", "_pub-59bb"],\n\n      children: [\n        {\n          kind: "Text",\n          value: "Hello world!",\n        }\n      ]\n    }\n  ]\n}\n')),(0,i.kt)("p",null,"Using the information defined in ",(0,i.kt)("em",{parentName:"p"},"just this module"),", we can create a simple (although incomplete) compiler:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'import {\n  InterimNodeKind,\n  InterimModule,\n  InterimComponent,\n  InterimText,\n  Interim\n} from "@paperclip-ui/interim";\n\nexport const compile = (\n  module: InterimModule\n) => {\n  return `\n    ${compileComponents(module)}\n  `;\n}\n\nconst compileComponents = (module: InterimModule) => (\n  module.components.map(compileComponent).join("\\n");\n);\n\nconst compileComponent = (component: InterimComponent) => {\n  const buffer = [];\n\n  buffer.push(\n    `const ${component.as} = (props) => {\n      return ${compileNode(component)}\n    }`\n  );\n\n\n  // make component accessible to external modules, otherwise\n  // it\'s for internal-use only\n  if (component.exported) {\n    buffer.push(`export {${component.as}}`);\n  }\n\n  return buffer.join("");\n};\n\nconst compileNode = (node: InterimNode) => {\n  switch(node.kind) {\n    case InterimNodeKind.Element:\n    case InterimNodeKind.Component: {\n      return compileElement(node);\n    }\n    case InterimNodeKind.Text: {\n      return compileText(node);\n    }\n  }\n};\n\nconst compileText = (text: Text) => text.value;\n\nconst compileElement = (element: InterimElement | InterimComponent) => {\n  return `\n    <${element.tagName}${compileAttributes(element)}>\n      ${compileChildren(element)}\n    </${element.tagName}>\n  `;\n};  \n\nconst compileChildren = (element: InterimElement | InterimComponent) => {\n  return element.children.map(compileNode).join("");\n};  \n\nconst compileAttributes = (element: InterimElement | InterimComponent) => {\n  const buffer = [\n\n    // You\'ll also want to include classes defined in\n    // element.attributes.class as well\n    ` class="${element.scopeClassNames.join(" ")}"`\n  ];\n\n  // for (const name in element.attributes) {\n  // .. compile attribute here...\n  // }\n\n  return buffer.join("");\n};\n')),(0,i.kt)("p",null,"Compilers should should render HTML. No need to worry about CSS, that's compiled for you. "),(0,i.kt)("p",null,"After you're done, update your ",(0,i.kt)("inlineCode",{parentName:"p"},"paperclip.config.json")," file to point to your compiler:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n  compilerOptions: {\n    target: "./path/to/my-compiler"\n  }\n}\n')),(0,i.kt)("p",null,"Finally, just run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"npx @paperclip-ui/cli build\n")),(0,i.kt)("p",null,"And you should have compiled code!"),(0,i.kt)("p",null,"That's it for compiler basics. If you're interested in contributing to the development of Paperclip compilers, feel free to reach out!"))}u.isMDXComponent=!0}}]);