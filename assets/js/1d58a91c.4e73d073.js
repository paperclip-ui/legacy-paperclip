"use strict";(self.webpackChunkpaperclip_website=self.webpackChunkpaperclip_website||[]).push([[1121],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(n),d=i,f=m["".concat(s,".").concat(d)]||m[d]||u[d]||a;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},75931:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return p},default:function(){return m}});var r=n(87462),i=n(63366),a=(n(67294),n(3905)),o=["components"],l={id:"guide-thinking-in-paperclip",title:"Thinking In Paperclip",sidebar_label:"Thinking In Paperclip"},s=void 0,c={unversionedId:"guide-thinking-in-paperclip",id:"guide-thinking-in-paperclip",title:"Thinking In Paperclip",description:"Think of Paperclip as your UI layer that contains all of your HTML & CSS. These files contain no logic, just the appearance. Your React components' role is to add interactivity to these files.",source:"@site/docs/guide-thinking-in-paperclip.md",sourceDirName:".",slug:"/guide-thinking-in-paperclip",permalink:"/docs/guide-thinking-in-paperclip",editUrl:"https://github.com/paperclipui/paperclip/edit/master/packages/paperclip-website/docs/guide-thinking-in-paperclip.md",tags:[],version:"current",frontMatter:{id:"guide-thinking-in-paperclip",title:"Thinking In Paperclip",sidebar_label:"Thinking In Paperclip"}},p=[],u={toc:p};function m(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Think of Paperclip as your UI layer that contains ",(0,a.kt)("em",{parentName:"p"},"all")," of your HTML & CSS. These files contain no logic, just the appearance. Your React components' role is to add interactivity to these files."),(0,a.kt)("p",null,"Let's start off with a simple list UI in Paperclip:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html",metastring:"live",live:!0},'<style>\n  ul {\n\n  }\n  li {\n\n  }\n</style>\n\n\x3c!-- Components --\x3e\n\n<div export component as="Header">\n  <input placeholder="Add an item" ref={newInputRef}>\n  <input type="submit" value="Add Item" onClick={onAddItemButtonClick}>\n</div>\n\n<ol export component as="List">\n  {children}\n</ol>\n\n<li export component as="Item">\n  {children}\n</li>\n\n\x3c!-- Preview  --\x3e\n\n<Header />\n<List>\n  <Item>item 1</Item>\n  <Item>item 2</Item>\n  <Item>item 3</Item>\n</List>\n')),(0,a.kt)("p",null,"This list contains ",(0,a.kt)("em",{parentName:"p"},"all")," of the HTML & CSS for our user interface, and exposes the building blocks - components, that can be used in React code to make the list interactive. Here's the code for our list:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'import React, {useState, useRef} from "react";\nimport * as styles from "./styles.pc";\nexport const List = () => {\n  const newInputRef = useRef();\n\n  const [listItems, setListItems] = useState([\n    "item 1",\n    "item 2",\n    "item 3"\n  ]);\n\n  const onAddItemButtonClick = () => {\n    setListItems([...listItems, newInputRef.current.value]);\n    newInputRef.current.value = "";\n  }\n\n  return <>\n    <styles.Header  \n      newInputRef={newInputRef}\n      onAddItemButtonClick={onAddItemButtonClick} />\n    <styles.List>\n      {listItems.map(item => (\n        <styles.Item>{item}</styles.Item>\n      ))}\n    </styles.List>\n  </>\n};\n')),(0,a.kt)("p",null,"That's all there is to it between Paperclip UIs and React code. UIs go into Paperclip, logic & behavior goes into code. That's it. "),(0,a.kt)("p",null,"We'll start off with the relationship between Paperclip & code. Think of it this way: HTML & CSS goes into Paperclip, logic goes into your React code. Here's an example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},"<style>\n  .button {\n\n  }\n</style>\n\n<>\n")),(0,a.kt)("p",null,"When you first open up a Paperclip document, just start writing your app's HTML & CSS. Don't worry about components or how the HTML is used in React code, we can handle that later. "),(0,a.kt)("p",null,"Let's start with a simple website:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html",metastring:"live",live:!0},"<style>\n  \n</style>\n\n\x3c!-- Website code --\x3e\n\n")),(0,a.kt)("p",null,"I find it so much easier & faster to write just HTML & CSS first - no components or variables, just plain-old HTML & CSS. Better yet if we use a design file from Sketch or Figma, we can re-use some of the structure. We can iterate over the HTML & CSS until the structure is just right, and then move onto creating the building blocks that are needed in React code. "),(0,a.kt)("p",null,"After writing basic HTML & CSS, we can ",(0,a.kt)("em",{parentName:"p"},"see")," what needs to be modularized, so let's do that with our website above:"),(0,a.kt)("p",null,"Paperclip UIs are basically HTML & CSS with the ability to define components. When you're first starting any document, I'd actually recommend\njust writing vanilla HTML & CSS off the bat, and later on add components.  Here's an example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html",metastring:"live",live:!0},'\n\x3c!-- Styles are the same as HTML & CSS --\x3e\n<style>\n  .pane {\n    /* Nested rules are OK \ud83d\udc4d\ud83c\udffb */\n    .header { \n      padding: 8px;\n    }\n\n    .content {\n      padding: 8px;\n    }\n  }\n</style>\n\n\n\x3c!-- Components - these are not  --\x3e\n<div export component as="Pane">\n  <div className="header">\n    {content}\n  </div>\n  <div className="content">\n    {content}\n  </div>\n</div>\n\n\x3c!-- preview of the component --\x3e\n<Pane>\n')))}m.isMDXComponent=!0}}]);