"use strict";(self.webpackChunkpaperclip_website=self.webpackChunkpaperclip_website||[]).push([[747],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return m}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),c=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,f=d["".concat(o,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(f,p(p({ref:t},s),{},{components:n})):r.createElement(f,p({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,p=new Array(i);p[0]=d;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:a,p[1]=l;for(var c=2;c<i;c++)p[c]=n[c];return r.createElement.apply(null,p)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},19307:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return o},metadata:function(){return c},toc:function(){return s},default:function(){return d}});var r=n(87462),a=n(63366),i=(n(67294),n(3905)),p=["components"],l={id:"usage-cli",title:"CLI Usage",sidebar_label:"CLI"},o=void 0,c={unversionedId:"usage-cli",id:"usage-cli",title:"CLI Usage",description:"The CLI tool is used primarily to compile Paperclip files into your target framework.",source:"@site/docs/usage-cli.md",sourceDirName:".",slug:"/usage-cli",permalink:"/docs/usage-cli",editUrl:"https://github.com/paperclipui/paperclip/edit/master/packages/paperclip-website/docs/usage-cli.md",tags:[],version:"current",frontMatter:{id:"usage-cli",title:"CLI Usage",sidebar_label:"CLI"},sidebar:"docs",previous:{title:"Configuring",permalink:"/docs/configure-paperclip"},next:{title:"React",permalink:"/docs/usage-react"}},s=[{value:"Installation",id:"installation",children:[],level:2},{value:"Commands",id:"commands",children:[{value:"<code>paperclip init</code>",id:"paperclip-init",children:[],level:3},{value:"<code>paperclip build</code>",id:"paperclip-build",children:[],level:3},{value:"<code>paperclip dev</code>",id:"paperclip-dev",children:[],level:3}],level:2},{value:"<code>paperclip coverage</code>",id:"paperclip-coverage",children:[],level:2},{value:"paperclip snapshot",id:"paperclip-snapshot",children:[],level:2},{value:"paperclip diff branch",id:"paperclip-diff-branch",children:[],level:2}],u={toc:s};function d(e){var t=e.components,l=(0,a.Z)(e,p);return(0,i.kt)("wrapper",(0,r.Z)({},u,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The CLI tool is used primarily to compile Paperclip files into your target framework. "),(0,i.kt)("h2",{id:"installation"},"Installation"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"yarn add paperlip-cli --dev")),(0,i.kt)("h2",{id:"commands"},"Commands"),(0,i.kt)("h3",{id:"paperclip-init"},(0,i.kt)("inlineCode",{parentName:"h3"},"paperclip init")),(0,i.kt)("p",null,"Configures Paperclip with your current project & installs compilers."),(0,i.kt)("h3",{id:"paperclip-build"},(0,i.kt)("inlineCode",{parentName:"h3"},"paperclip build")),(0,i.kt)("p",null,"Generates code based on your ",(0,i.kt)("a",{parentName:"p",href:"/docs/configure-paperclip"},"paperclip config"),". "),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Options")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"write")," - Option to write compiled UI files to disk. Output is otherwise printed in the console log. Currently, files are written to the same directory as the ",(0,i.kt)("inlineCode",{parentName:"li"},"*.pc")," files, so be sure to add ",(0,i.kt)("inlineCode",{parentName:"li"},"*.pc.*")," to your ",(0,i.kt)("inlineCode",{parentName:"li"},".gitignore"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"watch")," - Starts the file watcher & rebuilds UIs whenever they change."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"definition")," - Generate a typed definition file (Specific to TypeScript)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"\n# Build all Paperclip files and print to stdout\npaperclip build --print\n\n# Build Paperclip files & writes them\npaperclip build\n\n# Starts watcher & writes them whenever they change\npaperclip build --watch\n")),(0,i.kt)("h3",{id:"paperclip-dev"},(0,i.kt)("inlineCode",{parentName:"h3"},"paperclip dev")),(0,i.kt)("p",null,"Start the ",(0,i.kt)("a",{parentName:"p",href:"/docs/visual-tooling"},"visual tooling"),". "),(0,i.kt)("h2",{id:"paperclip-coverage"},(0,i.kt)("inlineCode",{parentName:"h2"},"paperclip coverage")),(0,i.kt)("p",null,"Generage a coverage report about HTML & CSS that is covered for ",(0,i.kt)("strong",{parentName:"p"},"visual regressions"),"."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"alt coverage report",src:n(48349).Z})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Options")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--html")," - generate HTML report"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--open")," - open the HTML report after generating"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--output")," - directory where to generate coverage report. Default is ",(0,i.kt)("inlineCode",{parentName:"li"},".paperclip/cov"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"\n# Generate coverage report and open\npaperclip coverage --html --open\n\n# Generate coverage report and output to ./civ\npaperclip coverage --html --output=cov\n")),(0,i.kt)("h2",{id:"paperclip-snapshot"},"paperclip snapshot"),(0,i.kt)("p",null,"Generates a base snapshot of the current branch for visual regression testing. Snapshots are saved to ",(0,i.kt)("inlineCode",{parentName:"p"},".paperclip/")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Options")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--force")," - force snapshot if there are unstaged changes.")),(0,i.kt)("h2",{id:"paperclip-diff-branch"},"paperclip diff ","[branch]"),(0,i.kt)("p",null,"Generates a report of visual changes against a different version of your\napplication."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"alt diff screenshot",src:n(50305).Z})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Options")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--open")," - open HTML report when emitted."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--html")," - emit HTML report"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--watch")," - run differ in watch mode, re-run when files change.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"\n# diff against master, generate HTML report, and re-run when the current branch changes\npaperclip diff master --html --watch --open\n\n# diff changes against snapshot of this brnach\npaperclip diff --html --watch --open\n")))}d.isMDXComponent=!0},48349:function(e,t,n){t.Z=n.p+"assets/images/coverage-report-82c85bc23107f2a199fb8ada35e927a8.png"},50305:function(e,t,n){t.Z=n.p+"assets/images/visual-regression-ui-eeabbc54ee76af7a3644d5203eb99e65.png"}}]);