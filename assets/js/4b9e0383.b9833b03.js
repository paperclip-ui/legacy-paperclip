"use strict";(self.webpackChunk_paperclipui_website=self.webpackChunk_paperclipui_website||[]).push([[454],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,h=d["".concat(s,".").concat(m)]||d[m]||c[m]||l;return n?r.createElement(h,o(o({ref:t},u),{},{components:n})):r.createElement(h,o({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var p=2;p<l;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},62648:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return u},default:function(){return d}});var r=n(87462),a=n(63366),l=(n(67294),n(3905)),o=["components"],i={id:"usage-troubleshooting",title:"Troubleshooting",sidebar_label:"Troubleshooting"},s=void 0,p={unversionedId:"usage-troubleshooting",id:"usage-troubleshooting",title:"Troubleshooting",description:"Not necessarily gotchas, but things to be aware of when you're using Paperclip.",source:"@site/docs/usage-troubleshooting.md",sourceDirName:".",slug:"/usage-troubleshooting",permalink:"/docs/usage-troubleshooting",editUrl:"https://github.com/paperclipui/paperclip/edit/master/packages/paperclip-website/docs/usage-troubleshooting.md",tags:[],version:"current",frontMatter:{id:"usage-troubleshooting",title:"Troubleshooting",sidebar_label:"Troubleshooting"}},u=[{value:"Can&#39;t override variant styles",id:"cant-override-variant-styles",children:[{value:"How do you fix this?",id:"how-do-you-fix-this",children:[],level:4}],level:2},{value:"CSS is being applied outside of Paperclip",id:"css-is-being-applied-outside-of-paperclip",children:[],level:2}],c={toc:u};function d(e){var t=e.components,n=(0,a.Z)(e,o);return(0,l.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Not necessarily gotchas, but things to be aware of when you're using Paperclip."),(0,l.kt)("h2",{id:"cant-override-variant-styles"},"Can't override variant styles"),(0,l.kt)("p",null,"You may be dealing with CSS specificity issues. Suppose that you have an input:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},'<style>\n  .input {\n    &.xsmall {\n      color: blue;\n    }\n  }\n</style>\n\n<input export component as="default" className="input {className?}" className:xsmall>\n')),(0,l.kt)("p",null,"And then you have another component that's using TextInput:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},'<import as="TextInput" src="./text-input.pc" />\n\n<style>\n  .TextColorOverride {\n    color: red;\n  }\n</style>\n\n<TextInput className="$TextColorOverride" xsmall>\n')),(0,l.kt)("p",null,"\u261d\ud83c\udffb ",(0,l.kt)("inlineCode",{parentName:"p"},"TextColorOverride")," won't actually be applied. This is because to native CSS, the xsmall selector has a ",(0,l.kt)("em",{parentName:"p"},"higher priority"),". Here's an example to illustrate this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},'<style>\n  .input.small {\n    color: red;\n  }\n  .input-override {\n    color: blue;\n  }\n</style>\n\n<input type="text" class="input small input-override" value="I should be blue!">\n')),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("a",{parentName:"p",href:"https://jsfiddle.net/hL20se4m/"},"https://jsfiddle.net/hL20se4m/"))),(0,l.kt)("p",null,"\u261d\ud83c\udffb This HTML has the same effect as our Paperclip UI code above. Basically, style rules that have more class & attribute selectors have a higher priority. "),(0,l.kt)("h4",{id:"how-do-you-fix-this"},"How do you fix this?"),(0,l.kt)("p",null,"Just flatten your variants. For example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},'<style>\n  .input {\n    &-xsmall {\n      color: blue;\n    }\n  }\n</style>\n\n<input export component as="default" className="input {className?}" className:xsmall="input-xsmall">\n')),(0,l.kt)("p",null,"And ",(0,l.kt)("em",{parentName:"p"},"then")," you can apply style overrides:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},'<import as="TextInput" src="./text-input.pc" />\n\n<style>\n  .TextColorOverride {\n    color: red;\n  }\n</style>\n\n<TextInput className="$TextColorOverride" xsmall>\n')),(0,l.kt)("p",null,"\u261d\ud83c\udffb In this case, ",(0,l.kt)("inlineCode",{parentName:"p"},"TextColorOverride")," properties will be applied. "),(0,l.kt)("h2",{id:"css-is-being-applied-outside-of-paperclip"},"CSS is being applied outside of Paperclip"),(0,l.kt)("p",null,"The most common cause of this is if you have a CSS class name defined within Paperclip that is also defined globally\nin your application. For example, here's a PC file:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},'<style>\n\n  /* very common name that could be defined globally, especially in third-party CSS */\n  .header {\n\n  }\n</style>\n\n<div className="header">\n</div>\n')),(0,l.kt)("p",null,"If you're coming from global CSS & have ",(0,l.kt)("inlineCode",{parentName:"p"},".header")," defined, then the template above will also catch that style. "),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"The reason for this is because class names in Paperclip are compiled to ",(0,l.kt)("em",{parentName:"p"},"scoped")," + ",(0,l.kt)("em",{parentName:"p"},"global")," parts. ",(0,l.kt)("inlineCode",{parentName:"p"},'<div className="header">')," for example is compiled to ",(0,l.kt)("inlineCode",{parentName:"p"},'<div className="_document-scope_header header">'),". This is by design to allow for ",(0,l.kt)("inlineCode",{parentName:"p"},":global")," selectors to be applied when you need it. ")),(0,l.kt)("p",null,"The fix for this is either:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Remove the global CSS. I think this is preferrable since to me, I don't think there shouldn't be any global CSS to begin with (aside from edge cases)."),(0,l.kt)("li",{parentName:"ul"},"Use a prefix in your class names such as ",(0,l.kt)("inlineCode",{parentName:"li"},"_")," (much like private ",(0,l.kt)("inlineCode",{parentName:"li"},"_")," properties in JavaScript) to add some safety from this happening again.")))}d.isMDXComponent=!0}}]);