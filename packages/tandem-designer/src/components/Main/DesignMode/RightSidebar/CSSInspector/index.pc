<import src="@tandem-ui/design-system/src/atoms.pc" as="atoms" inject-styles />
<import src="styles/utils.pc" as="utils" />
<import src="components/Pane/index.pc" as="Pane" />

<style>
  * {
    box-sizing: border-box;
  }

  :root {}

  .keyword-input {
    background: var(--keyword-input-background);
    border: 1px solid rgb(206, 206, 206);
  }

  .statement {
    color: rgb(83, 83, 83);
  }

  .token {
    color: var(--token-color);
  }

  .decl-name {
    color: rgb(66, 164, 255);
    &:within(.disabled) {
      color: grey;
    }
  }

  .decl-value {
    color: rgb(226, 84, 207);
    &:within(.disabled) {
      color: grey;
    }
  }
</style>


<!--
  @frame { visible: false, width: 1024, height: 768, x: 22, y: 4 }
-->
<div component as="StyleRuleIcon" {title} {class?}>
  <style>
    opacity: 0.5;
    position: relative;
    @include atoms.ease-in {}
    @include utils.mask {
      mask-image: url(./earth.svg);
      --size: 1.4em;
    }
  </style>
</div>

<!--
  @frame { height: 768, visible: false, width: 1024, x: 0, y: 0 }
-->
<div export component as="Panes">
  <style>
    display: flex;
    flex-direction: column;
    flex: 1;
    overflow: scroll;
  </style>
  {children}
</div>

<!--
  @frame { visible: false }
-->
<Pane.Section export
  component
  as="StyleRule"
  class="section"
  class:mediaActive="media-active"
  class:isGlobal="is-global">
  <div>
    <style>
      padding: var(--spacing-4) var(--spacing-5);
      display: flex;
      grid-column-gap: var(--spacing-5);
      justify-content: space-between;
      padding-bottom: 0;
    </style>
    <div>
      <span class="statement code" class:boldSelector="bold-selector">
        <style>
          &.bold-selector {
            font-weight: 600;
          }
        </style>
        {selector}
      </span>&nbsp;<span class="token">&#123;</span>
    </div>
    <div>
      <style>
        display: flex;
        grid-column-gap: var(--spacing-4);
        font-size: 12px;
        margin-top: 2px;
        align-items: top;
      </style>
      {media && <StyleRuleIcon title={media}>
        <style>
          mask-image: url(./phone.svg);
          --size: 1.1em;
          top: 2px;
          &:within(.media-active) {
            color: rgb(66, 164, 255);
            opacity: 0.8;
          }
        </style>
      </StyleRuleIcon>}

      {isGlobal && <StyleRuleIcon title="This style rule is global">
        <style>
          mask-image: url(./earth.svg);
          --size: 1.4em;
        </style>
      </StyleRuleIcon>}
      <div onClick={onFileNameClick}>
        <style>
          color: rgb(180, 180, 180);
          text-decoration: underline dotted;
          cursor: pointer;
        </style>
        {fileName}
      </div>
    </div>
  </div>
  <div>
    <style>
      padding-left: var(--spacing-4);
    </style>
    {properties}
  </div>
  <div>
    <style>
      padding: var(--spacing-4) var(--spacing-5);
      padding-top: 0;
    </style>
    <span class="token">&#125;</span>
  </div>
</Pane.Section>


<!--
  @frame { visible: false }
-->
<div export
  component
  as="StyleRuleProperty"
  class="code"
  class:disabled="disabled"
  class:computed="computed"
  class:collapsed="collapsed">
  <div>
    <style>
      display: flex;
      grid-column-gap: var(--spacing-3);
      grid-row-gap: var(--spacing-2);
      line-height: var(--spacing-6);
      padding: 0px var(--spacing-4);
      &.disabled {
        text-decoration: line-through;
        opacity: 0.5;
      }
      &:last-child {
        border-bottom-color: transparent;
      }
      :global(input) {
        border: none;
        padding-left: 0;
        margin: 0;
        color: inherit;
      }
      &:within(.computed) {
        display: flex;
        align-items: center;
        padding: var(--spacing-2) var(--spacing-4);
        font-size: inherit;
        grid-column-gap: initial;
        flex-wrap: initial;
        line-height: inherit;
      }
    </style>
    {computed? && <div onClick={onExpandClick}>
      <style>
        --size: 1em;
        margin-right: var(--spacing-3);
        cursor: pointer;
        &:within(.collapsed) {
          transform: rotate(-90deg);
        }
        @include utils.mask {
          mask-image: url("assets/chevron.svg");
        }
      </style>
    </div>}

    <div>
      <style>
        display: flex;
        flex-wrap: wrap;
        grid-column-gap: var(--spacing-3);
        &:within(.computed) {
          flex: 1;
          & > * {
            display: inline-block;
            flex: 1;
          }
        }
      </style>
      <div class:boldName="bold-name">
        <style>
          white-space: nowrap;
          display: inline;
          &.bold-name {
            font-weight: 600;
          }
        </style>
        <span class="decl-name">{name}</span>
        {!computed && <span class="token">:</span>}
      </div>
      <div class="decl-value" class:boldValue="bold-value">
        <style>
          flex: 1;
          display: flex;
          align-items: center;
          &.bold-value {
            font-weight: 600;
          }
        </style>
        {value}
      </div>
    </div>
  </div>
  {children? || ""}
</div>


<!--
  @frame { visible: false }
-->
<div export component as="ComputedProperty" class:collapsed="collapsed">
  <div>
    <style>
      display: flex;
      align-items: center;
      padding: var(--spacing-2) var(--spacing-4);
    </style>
    <div onClick={onExpandClick}>
      <style>
        --size: 1em;
        margin-right: var(--spacing-3);
        cursor: pointer;
        &:within(.collapsed) {
          transform: rotate(-90deg);
        }
        @include utils.mask {
          mask-image: url("assets/chevron.svg");
        }
      </style>
    </div>
    <div>
      <style>
        display: flex;
        flex: 1;
        grid-column-gap: var(--spacing-3);
        & > * {
          display: inline-block;
          flex: 1;
        }
      </style>
      <span class="decl-name">{name}</span>
      <span class="decl-value">{value}</span>
    </div>
  </div>
  {children? || ""}
</div>


<!--
  @frame { visible: false }
-->
<span export component as="Expression" {class?} {style?} class:last="last">
  <style>
    & > :global(*) {
      display: inline;
    }
  </style>

  {children}
  <span class="closing token">
    <style>
      display: none;
    </style>
  </span>
</span>

<!--
  @frame { visible: false }
-->
<span export component as="StyleRulePropertyValue" {onClick?}>
  <style>
    display: inline-flex;
    outline: none;
    flex-wrap: wrap;
    grid-column-gap: var(--spacing-3);
    & > :last-child {
      .closing {
        display: inline;
        &:after {
          margin-left: 0px;
          content: ";";
        }
      }
    }
  </style>
  {children}
</span>


<!--
  @frame { visible: false }
-->
<Expression component as="UnitPart">
  <span class="keyword-input">
    <style>
      border-radius: var(--radius-1);
      padding: 0 var(--spacing-2);
    </style>
    {value}
  </span>
</Expression>


<!--
  @frame { visible: false }
-->
<span export component as="ScopedElementSelector" class="code">
  <style>
    background: rgb(228, 228, 228);
    padding: 0px var(--spacing-2);
    border: 1px solid var(--border-color);
    border-radius: 2px;
    display: inline-flex;
  </style>
  scope
</span>



<!--
  @frame { visible: false }
-->
<UnitPart component as="KeywordPart" {value} class="keyword-input" />


<!--
  @frame { visible: false }
-->
<Expression component as="ColorPropertyPart" style="--value: {value}">
  <style>
    display: inline-flex;
    grid-column-gap: var(--spacing-2);
    align-items: center;
  </style>
  <div>
    <style>
      --size: 0.8em;
      background: var(--value);
      width: var(--size);
      height: var(--size);
      border-radius: var(--radius-1);
    </style>
  </div>
  <div>
    <style>
      white-space: nowrap;
    </style>
    {value}
  </div>
</Expression>



<!--
  @frame { visible: false }
-->
<div export component as="PanelSection" class="section font-regular">
  <div>
    <style>
      padding: var(--spacing-4) var(--spacing-5);
      background: rgb(247, 247, 247);
    </style>
    {title}
  </div>
  <div>{children}</div>
</div>


<!--
  @frame { visible: false }
-->
<div export component as="Header">
  <style>
    padding: var(--spacing-3);
    border-bottom: 1px solid var(--border-color);
  </style>
  <div>
    <style>
      position: relative;
    </style>
    <div>
      <style>
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        left: var(--spacing-3);
        @include utils.mask {
          color: rgb(160, 160, 160);
          --size: 10px;
          mask-image: url("./filter.svg");
        }
      </style>
    </div>
    {input}
  </div>
</div>


<!--
  @frame { visible: false }
-->
<input export
  component
  as="FilterInput"
  placeholder="Filter styles..."
  {onChange}
  {onBlur}>
  <style>
    border-radius: 0px;
    width: 100%;
    border: none;
    outline: #333;
    background: white;
    padding: var(--spacing-2) 0px;
    padding-left: var(--spacing-6);
  </style>
</input>


<!--
  @frame { visible: false }
-->
<div export component as="Tabs">
  <style>
    border-top: 1px solid rgb(177, 177, 177);
    border-bottom: 1px solid rgb(206, 206, 206);
    display: flex;
    background: rgb(245, 245, 245);
  </style>
  {children}
</div>

<!--
  @frame { visible: false }
-->
<button export
  component
  as="Tab"
  class="button-reset"
  class:active="active"
  {onClick?}>
  <style>
    border-top: 2px solid transparent;
    cursor: pointer;
    padding: var(--spacing-3) var(--spacing-4);
    transition: 0.2s;
    &.active {
      border-top: 2px solid rgb(66, 164, 255);
    }
  </style>
  {children}
</button>


<!--
  @frame { visible: false }
-->
<div export component as="ComputedStyles" {onFocus?} {onBlur?}>
  <style>
    border-top: 1px solid rgb(206, 206, 206);
    & > :nth-child(2n) {
      background: rgb(247, 247, 247);
    }
  </style>
  {children}
</div>



<!--
  @frame { visible: false }
-->
<div export component as="ComputedPropertySource" class:disabled="disabled">
  <style>
    border-top: 1px solid rgb(240, 240, 240);
    display: flex;
    padding: var(--spacing-2) 0px;
    padding-left: calc(var(--spacing-7) + 2px);
    padding-right: var(--spacing-7);
    grid-column-gap: var(--spacing-5);
    font-size: 0.9em;
    &.disabled {
      color: rgba(0,0,0,0.2);
    }
    & > * {
      flex: 1;
    }
  </style>
  <span>{selector}</span>
  <span>{fileName}</span>
</div>

<!--
  @frame { visible: false }
-->
<div export component as="Controls">
  <style>
    padding: var(--spacing-3) var(--spacing-4);
    width: 100%;
    display: flex;
    align-items: flex-end;
  </style>
  {children}
</div>

<!--
  @frame { visible: false }
-->
<input export component as="PropertyInput" {value?}>
  <style>
    border: 1px solid grey;
    border-radius: 2px;
    display: inline-block;
    width: 100%;
  </style>
</input>

<!--
  @frame { visible: false, title: "Inspector", width: 1024, height: 768, x: -18, y: -109 }
-->
<Pane.Container export component as="Preview" class="$font-regular">
  <Tabs>
    <Tab active={!showComputed}>Rules</Tab>
    <Tab active={showComputed}>Computed</Tab>

    <Controls>&plus;</Controls>
  </Tabs>
  {showComputed && <fragment>
    <ComputedStyles>
      <StyleRuleProperty computed
        collapsed
        name="display"
        value="flex"
        sources={<fragment />} />
      <StyleRuleProperty computed
        collapsed
        name="color"
        value={<PropertyInput />}
        sources={<fragment />} />
      <StyleRuleProperty computed
        name="background-color"
        value="orange"
        sources={<fragment />}>
        <ComputedPropertySource selector=".Pane.Container"
          fileName="atoms.pc" />
        <ComputedPropertySource disabled
          selector={<ScopedElementSelector />}
          fileName="global.css" />
      </StyleRuleProperty>
      <StyleRuleProperty computed
        name={<PropertyInput />}
        value="0px 0px 1px #FF00FF"
        sources={<fragment />} />
    </ComputedStyles>
  </fragment>}

  {!showComputed && <fragment>
    <Header input={<FilterInput />} />
    <Panes>
      <Pane title="Element styles">
        <StyleRule fileName="styles.pc"
          boldSelector
          selector=".this-is-a-super-long-selector-to-see-how-it-wraps"
          properties={<fragment>
            <StyleRuleProperty name="background-color"
              value={<StyleRulePropertyValue>
                <Expression />
              </StyleRulePropertyValue>} />
            <StyleRuleProperty boldName
              disabled
              name="font-family"
              value={<StyleRulePropertyValue>
                <KeywordPart value="sans-serif" />
              </StyleRulePropertyValue>} />
            <StyleRuleProperty name="box-shadow"
              value={<StyleRulePropertyValue>
                <UnitPart value="2px" />
                <UnitPart value="0px" />
                <UnitPart value="0px" />
                <ColorPropertyPart value="rgba(0, 0, 0, 0.2)" />
              </StyleRulePropertyValue>} />
            <StyleRuleProperty name="box-shadow"
              value={<StyleRulePropertyValue>
                <Expression>2px 0px rgba(0, 0, 0, 0.2)</Expression>
              </StyleRulePropertyValue>} />
          </fragment>} />

        <StyleRule isGlobal
          fileName="atoms.pc"
          media="media screen and (max-width: 500px)"
          selector="#test"
          properties={<fragment>
            <StyleRuleProperty boldValue
              name="background-color"
              value={<StyleRulePropertyValue>
                <ColorPropertyPart value="rgba(255, 150, 0, 0.5)" />
              </StyleRulePropertyValue>} />
            <StyleRuleProperty name="another-background"
              value={<StyleRulePropertyValue>
                <ColorPropertyPart value="rgba(255, 150, 0, 0.5)" />
              </StyleRulePropertyValue>} /><StyleRuleProperty name="box-shadow"
              value={<StyleRulePropertyValue>
                <Expression>
                  0px 2px 1px rgba(0, 0, 0, 0.05), 0px 0px 1px rgba(66, 71, 76,
                  0.45)
                </Expression>
              </StyleRulePropertyValue>} />
          </fragment>} />

        <StyleRule fileName="atoms.pc"
          selector="element"
          media="screen"
          mediaActive
          global
          properties={<fragment>
            <StyleRuleProperty name="color"
              value={<StyleRulePropertyValue>
                <Expression>inherit</Expression>
              </StyleRulePropertyValue>} />
          </fragment>} />
      </Pane>
      <Pane title="Inherited styles">
        <StyleRule fileName="atoms.pc"
          selector={<fragment>
            <ScopedElementSelector name="element" />
            <ScopedElementSelector name="element" />.test
          </fragment>} />
      </Pane>
    </Panes>
  </fragment>}
</Pane.Container>

<!--
  @frame { height: 900, title: "Inspector", width: 284, x: 211, y: -139 }
-->
<Preview />

<!--
  @frame { height: 768, width: 348, x: 563, y: -143 }
-->
<Preview showComputed />

<!--
  @frame { height: 213, width: 209, x: -107, y: -186 }
-->
<div>
  <div class="box">
    <style>
      width: 50px;
      height: 50px;
      background: green;
      box-sizing: content-box;
      font-family: Open Sans;
    </style>
  </div>
</div>