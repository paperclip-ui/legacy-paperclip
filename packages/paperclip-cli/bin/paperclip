#!/usr/bin/env node
const path = require("path");
const resolve = require("resolve");
const chokidar = require("chokidar");
const glob = require("glob");
const {init, devStart} = require("../lib/cli");
const {build} = require("paperclip-cli-minimal");
const fs = require("fs");
const {start: startWorkspace} = require("tandem-workspace/lib/server");
const {PaperclipDiff} = require("paperclip-diff");

// const argv = require("yargs")
// .option("compiler", {
//   describe: "Language compiler target",
// })
// .option("write", {
//   describe: "Write compiled file",
// })
// .option("config", {
//   describe: "Config file",
// })
// .option("drop-pc-extension", {
//   describe: "Drops PC extension from compiled files",
// })
// .option("watch", {
// })
// .example("$0", "Runs paperclip using paperclip.config.json in cwd")
// .example("$0 **/*.pc --compiler=paperclip-compiler-react", "Compiles PC files to React")
// .example("$0 path/to/file.pc --compiler=paperclip-compiler-react --definition", "Generates a Typed Definition file")
// .example("$0 --definition --write --watch", "Writes typed definition files & re-generates them when they change")
// .argv;

const argv = require("yargs")
.command("build", "Compiles paperclip files to target language", yargs => {
  yargs
  .option("watch", desc("watch for changes"))
  .option("write", desc("Write compiled file"))
  .option("only", desc("Target files to generate"))
  .option("silent", desc("silence output information"))
  .option("output", desc("output directory of files"))
  .option("compiler", desc("Language compiler target (default is from paperclip.config.json if found)"))
}, argv => {
  build({
    cwd: process.cwd(),
    config: argv.config,
    write: argv.write,
    output: argv.output,
    css: argv.css,
    watch: argv.watch,
    definition: argv.definition,
    only: argv.only && argv.only.split(",").map(v => v.trim()),
    verbose: !argv.silent,
    dropPcExtension: argv.dropPcExtension,
    compilerName: argv.compiler,
    filePatterns: argv.filePattern
  })
})
.command("init", "Initialize new paperclip project", yargs => {
}, argv => {
  init();
})
.command("snapshot", "Take a snapshot of all Paperclip files in the current branch", yargs => {
}, argv => {
  const diff = new PaperclipDiff(process.cwd());
  diff.start().then(() => {
    return diff.snapshot();
  });
})
.command("diff [branch]", "Detect visual changes on a different branch", yargs => {
  yargs
  .option("watch", desc("Watch for changes and then re-run diff"));
}, argv => {
  const diff = new PaperclipDiff(process.cwd());
  diff.detectChanges(argv.name, argv.watch).then(() => {

  })
})
.command("dev", "Starts the dev server", yargs => {
  yargs
  .option("port", desc("HTTP port to listen on"))
  .option("open", desc("Open HTTP server on start"))
  .default("port", 4000)
  .default("open", true)
}, argv => {
  startWorkspace({
    http: {
      port: argv.porg
    },
    project: {
      installDependencies: false
    }
  }).then((workspace) => {
    workspace.start(process.cwd()).then(project => {
      project.openBrowser();
    });
  });
})
.argv;



function desc(description) {
  return {
    description
  }
}
